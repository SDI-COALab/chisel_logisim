circuit IF :
  module IF :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip stallStageIF : UInt<1>, flip branchTarget_ID : UInt<32>, flip branchFlag_ID : UInt<1>, flip reset : UInt<1>, PC_IF : UInt<32>, instr_IF : UInt<32>}

    cmem mem : UInt<8> [128] @[IF.scala 22:18]
    reg PC : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[IF.scala 24:21]
    reg nextPC : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[IF.scala 25:25]
    node _PC_next_T = add(PC, UInt<32>("h4")) @[IF.scala 27:25]
    node PC_next = tail(_PC_next_T, 1) @[IF.scala 27:25]
    node _nextPC_T = mux(io.branchFlag_ID, io.branchTarget_ID, PC_next) @[Mux.scala 101:16]
    nextPC <= _nextPC_T @[IF.scala 28:12]
    node _PC_T = mux(io.branchFlag_ID, io.branchTarget_ID, nextPC) @[Mux.scala 101:16]
    node _PC_T_1 = mux(io.reset, UInt<32>("h0"), _PC_T) @[Mux.scala 101:16]
    node _PC_T_2 = mux(io.stallStageIF, PC, _PC_T_1) @[Mux.scala 101:16]
    PC <= _PC_T_2 @[IF.scala 31:8]
    node _T = bits(reset, 0, 0) @[IF.scala 36:11]
    node _T_1 = eq(_T, UInt<1>("h0")) @[IF.scala 36:11]
    when _T_1 : @[IF.scala 36:11]
    node _T_2 = bits(reset, 0, 0) @[IF.scala 37:11]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[IF.scala 37:11]
    when _T_3 : @[IF.scala 37:11]
    node _T_4 = bits(reset, 0, 0) @[IF.scala 38:11]
    node _T_5 = eq(_T_4, UInt<1>("h0")) @[IF.scala 38:11]
    when _T_5 : @[IF.scala 38:11]
    node _T_6 = bits(reset, 0, 0) @[IF.scala 39:11]
    node _T_7 = eq(_T_6, UInt<1>("h0")) @[IF.scala 39:11]
    when _T_7 : @[IF.scala 39:11]
    node _instr_IF_T = add(PC, UInt<32>("h3")) @[IF.scala 41:31]
    node _instr_IF_T_1 = tail(_instr_IF_T, 1) @[IF.scala 41:31]
    node _instr_IF_T_2 = bits(_instr_IF_T_1, 6, 0) @[IF.scala 41:27]
    infer mport instr_IF_MPORT = mem[_instr_IF_T_2], clock @[IF.scala 41:27]
    node _instr_IF_T_3 = add(PC, UInt<32>("h2")) @[IF.scala 41:58]
    node _instr_IF_T_4 = tail(_instr_IF_T_3, 1) @[IF.scala 41:58]
    node _instr_IF_T_5 = bits(_instr_IF_T_4, 6, 0) @[IF.scala 41:54]
    infer mport instr_IF_MPORT_1 = mem[_instr_IF_T_5], clock @[IF.scala 41:54]
    node _instr_IF_T_6 = add(PC, UInt<32>("h1")) @[IF.scala 41:85]
    node _instr_IF_T_7 = tail(_instr_IF_T_6, 1) @[IF.scala 41:85]
    node _instr_IF_T_8 = bits(_instr_IF_T_7, 6, 0) @[IF.scala 41:81]
    infer mport instr_IF_MPORT_2 = mem[_instr_IF_T_8], clock @[IF.scala 41:81]
    node _instr_IF_T_9 = bits(PC, 6, 0) @[IF.scala 41:108]
    infer mport instr_IF_MPORT_3 = mem[_instr_IF_T_9], clock @[IF.scala 41:108]
    node instr_IF_lo = cat(instr_IF_MPORT_2, instr_IF_MPORT_3) @[Cat.scala 31:58]
    node instr_IF_hi = cat(instr_IF_MPORT, instr_IF_MPORT_1) @[Cat.scala 31:58]
    node instr_IF = cat(instr_IF_hi, instr_IF_lo) @[Cat.scala 31:58]
    node _T_8 = bits(reset, 0, 0) @[IF.scala 42:11]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[IF.scala 42:11]
    when _T_9 : @[IF.scala 42:11]
    io.PC_IF <= PC @[IF.scala 44:14]
    io.instr_IF <= instr_IF @[IF.scala 45:17]

